// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LeapCoreSDK
import CoreData
import Foundation
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
import zlib
@_hasMissingDesignatedInitializers public class LeapMemoryMonitor {
  public static let shared: LeapCoreSDK.LeapMemoryMonitor
  public func startMonitoring()
  @objc deinit
}
@objc public protocol LeapAUIHandler : ObjectiveC.NSObjectProtocol {
  @objc func startBulkDownload(assetInfo: [Swift.String : Swift.AnyHashable], possibleBaseUrls: [Swift.String])
  @objc func presentWindowInstruction(data: [Swift.String : Swift.AnyHashable], selectedLanguage: Swift.String, assosciatedIconRequired: Swift.Bool, flowMenuInfo: [Swift.String : Swift.AnyHashable]?)
  @objc func presentInViewInstruction(data: [Swift.String : Swift.AnyHashable], rect: CoreFoundation.CGRect, anchorView: UIKit.UIView?, parentScroll: UIKit.UIView?, autoFocusScript: Swift.String?, selectedLanguage: Swift.String)
  @objc func presentLanguagePanel(languages: [[Swift.String : Swift.String]], iconInfo: [Swift.String : Swift.AnyHashable]?, baseUrl: Swift.String, htmlUrl: Swift.String, selectedLocale: Swift.String, languageSelected: @escaping (Swift.String) -> Swift.Void, panelDismissed: @escaping () -> Swift.Void)
  @objc func presentLeapButton(iconInfo: [Swift.String : Swift.AnyHashable], disableDict: @escaping () -> [Swift.String : Swift.String], showIconOptionOnTap: @escaping () -> Swift.Bool, disableCallbacks: @escaping (_ isPresented: Swift.Bool, _ yesClicked: Swift.Bool, _ noClicked: Swift.Bool) -> Swift.Void, iconOptionsCallback: @escaping (_ stopClicked: Swift.Bool, _ languageClicked: Swift.Bool) -> Swift.Void, iconOptionsInfo: @escaping () -> [Swift.String : Swift.String])
  @objc func updateRect(rect: CoreFoundation.CGRect, parentView: UIKit.UIView?)
  @objc func clearAllViews(isAutoDismiss: Swift.Bool)
  @objc func sendEvent(event: [Swift.String : Swift.AnyHashable])
}
@objc public protocol LeapAUICallback : ObjectiveC.NSObjectProtocol {
  @objc func didHtmlLoad(forUrl url: Swift.String, type: Swift.String, additionalInfoDict: [Swift.String : Any])
  @objc func didStartAnimation(forUrl url: Swift.String, type: Swift.String)
  @objc func didCompleteAnimation(forUrl url: Swift.String, type: Swift.String)
  @objc func didRenderComplete(forUrl url: Swift.String, type: Swift.String, additionalInfoDict: [Swift.String : Any])
  @objc func didCarouselRenderComplete(forUrl url: Swift.String, carouselDict: [Swift.String : Any])
  @objc func didPresentAssist()
  @objc func failedToPerform()
  @objc func failedToPerformTooltipAssist(with reason: Swift.String)
  @objc func didDismissView(byUser: Swift.Bool, autoDismissed: Swift.Bool, panelOpen: Swift.Bool, action: Swift.Dictionary<Swift.String, Any>?)
  @objc func receiveAUIEvent(action: Swift.Dictionary<Swift.String, Any>)
  @objc func receiveSurveyEvent(listOfSurveyInfo: Swift.Array<Swift.Dictionary<Swift.String, Any>>)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class LeapCore : ObjectiveC.NSObject {
  @objc public static let shared: LeapCoreSDK.LeapCore
  public func initialize(withToken token: Swift.String, isTesting isTest: Swift.Bool, uiManager: (any LeapCoreSDK.LeapAUIHandler)?, initializeComplete: @escaping () -> Swift.Void) -> (any LeapCoreSDK.LeapAUICallback)?
  public func startProject(projectId: Swift.String, resetProject: Swift.Bool, completion: @escaping () -> Swift.Void)
  public func embedProject(_ projectId: Swift.String, completion: @escaping () -> Swift.Void)
  public func flush(properties: [Swift.String : Swift.AnyHashable], completion: () -> Swift.Void)
  public func offlineSync(_ projectIds: [Swift.String], completion: @escaping () -> Swift.Void)
  public func setUniqueUserId(_ uniqueId: Swift.String, completion: @escaping () -> Swift.Void)
  public func setAppLocale(_ localeCode: Swift.String)
  public func logout(logoutComplete: @escaping () -> Swift.Void)
  public func sendObserverLog(_ log: [Swift.String : Swift.AnyHashable])
  public func getNativeHierarchy(_ view: UIKit.UIView, completion: @escaping (_ viewHierarchy: Swift.String?) -> Swift.Void)
  @objc deinit
}
public struct CompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: LeapCoreSDK.CompressionLevel
  public static let bestSpeed: LeapCoreSDK.CompressionLevel
  public static let bestCompression: LeapCoreSDK.CompressionLevel
  public static let defaultCompression: LeapCoreSDK.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: LeapCoreSDK.GzipError.Kind, b: LeapCoreSDK.GzipError.Kind) -> Swift.Bool
  }
  public let kind: LeapCoreSDK.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: LeapCoreSDK.CompressionLevel = .defaultCompression) throws -> Foundation.Data
  public func gunzipped() throws -> Foundation.Data
}
@objc @_inheritsConvenienceInitializers public class WfxLogEntry : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension LeapCoreSDK.WfxLogEntry {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<LeapCoreSDK.WfxLogEntry>
  @objc @NSManaged dynamic public var extras: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var message: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sdk: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var wfxLogSession: LeapCoreSDK.WfxLogSession? {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers public class WfxLogSession : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension LeapCoreSDK.WfxLogSession {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<LeapCoreSDK.WfxLogSession>
  @objc @NSManaged dynamic public var appVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endedAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var extras: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sdkVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var wfxLogEntries: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension LeapCoreSDK.WfxLogSession {
  @objc(insertObject:inWfxLogEntriesAtIndex:) @NSManaged dynamic public func insertIntoWfxLogEntries(_ value: LeapCoreSDK.WfxLogEntry, at idx: Swift.Int)
  @objc(removeObjectFromWfxLogEntriesAtIndex:) @NSManaged dynamic public func removeFromWfxLogEntries(at idx: Swift.Int)
  @objc(insertWfxLogEntries:atIndexes:) @NSManaged dynamic public func insertIntoWfxLogEntries(_ values: [LeapCoreSDK.WfxLogEntry], at indexes: Foundation.NSIndexSet)
  @objc(removeWfxLogEntriesAtIndexes:) @NSManaged dynamic public func removeFromWfxLogEntries(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInWfxLogEntriesAtIndex:withObject:) @NSManaged dynamic public func replaceWfxLogEntries(at idx: Swift.Int, with value: LeapCoreSDK.WfxLogEntry)
  @objc(replaceWfxLogEntriesAtIndexes:withWfxLogEntries:) @NSManaged dynamic public func replaceWfxLogEntries(at indexes: Foundation.NSIndexSet, with values: [LeapCoreSDK.WfxLogEntry])
  @objc(addWfxLogEntriesObject:) @NSManaged dynamic public func addToWfxLogEntries(_ value: LeapCoreSDK.WfxLogEntry)
  @objc(removeWfxLogEntriesObject:) @NSManaged dynamic public func removeFromWfxLogEntries(_ value: LeapCoreSDK.WfxLogEntry)
  @objc(addWfxLogEntries:) @NSManaged dynamic public func addToWfxLogEntries(_ values: Foundation.NSOrderedSet)
  @objc(removeWfxLogEntries:) @NSManaged dynamic public func removeFromWfxLogEntries(_ values: Foundation.NSOrderedSet)
}
